@mixin placeholder {
  &::-webkit-input-placeholder {@content}
  &:-moz-placeholder           {@content}
  &::-moz-placeholder          {@content}
  &:-ms-input-placeholder      {@content}
}


@mixin invisible($visibility) {
  visibility: $visibility !important;
}


//@mixin custom-make-container($gutter) {
//  margin-right: auto;
//  margin-left: auto;
//  padding-right: ($gutter / 2);
//  padding-left:  ($gutter / 2);
//  //width: 100%;
//}

$screen-xs:                   0 !default;
$screen-sm:                   480px !default;
$screen-md:                   768px !default;
$screen-lg:                   992px !default;
$screen-xl:                   1344px !default;
$screen-xxl:                  1800px !default;

$container-sm:                100% !default;
$container-md:                720px !default;
$container-lg:                960px !default;
$container-xl:                1248px !default;
$container-xxl:               1680px !default;

$grid-columns:                12 !default;
$grid-gutter-width:           8px !default;



//------------------------------------------------------------------------------
//  Генератор правил для контейнера
//------------------------------------------------------------------------------

//@mixin container (
//  $xs-grid-gutter:  $grid-gutter-width,
//  $sm-grid-gutter:  $grid-gutter-width,
//  //$md-grid-gutter:  ($grid-gutter-width + 40),
//  $md-grid-gutter:  $grid-gutter-width,
//  $lg-grid-gutter:  $grid-gutter-width,
//  $xl-grid-gutter:  $grid-gutter-width,
//  $xxl-grid-gutter: $grid-gutter-width
//) {
//  display: block;
//  width: 100%;
//  margin-left: auto;
//  margin-right: auto;
//
//  @if ($xs-grid-gutter != 0) {
//    padding-left: ($xs-grid-gutter / 2);
//    padding-right: ($xs-grid-gutter / 2);
//  }
//
//  @media (min-width: $screen-sm) {
//    max-width: $container-sm;
//
//    @if ($sm-grid-gutter != $xs-grid-gutter) {
//      padding-left: ($sm-grid-gutter / 2);
//      padding-right: ($sm-grid-gutter / 2);
//    }
//  }
//
//  @media (min-width: $screen-md) {
//    width: $container-md;
//
//    @if ($md-grid-gutter != $sm-grid-gutter) {
//      padding-left: ($md-grid-gutter / 2);
//      padding-right: ($md-grid-gutter / 2);
//    }
//  }
//
//  @media (min-width: $screen-lg) {
//    width: $container-lg;
//
//    @if ($lg-grid-gutter != $md-grid-gutter) {
//      padding-left: ($lg-grid-gutter / 2);
//      padding-right: ($lg-grid-gutter / 2);
//    }
//  }
//
//  @media (min-width: $screen-xl) {
//    width: $container-xl;
//
//    @if ($xl-grid-gutter != $lg-grid-gutter) {
//      padding-left: ($xl-grid-gutter / 2);
//      padding-right: ($xl-grid-gutter / 2);
//    }
//  }
//
//  @media (min-width: $screen-xxl) {
//    width: $container-xxl;
//
//    @if ($xxl-grid-gutter != $xl-grid-gutter) {
//      padding-left: ($xxl-grid-gutter / 2);
//      padding-right: ($xxl-grid-gutter / 2);
//    }
//  }
//}

@mixin container (
  $xs-grid-gutter:  $grid-gutter-width,
  $sm-grid-gutter:  $grid-gutter-width,
  //$md-grid-gutter:  ($grid-gutter-width + 40),
  $md-grid-gutter:  $grid-gutter-width,
  $lg-grid-gutter:  $grid-gutter-width,
  $xl-grid-gutter:  $grid-gutter-width,
  $xxl-grid-gutter: $grid-gutter-width
) {
  display: block;
  width: 100%;
  margin-left: auto;
  margin-right: auto;

  @if ($xs-grid-gutter != 0) {
    padding-left: ($xs-grid-gutter / 2);
    padding-right: ($xs-grid-gutter / 2);
  }

  @media (min-width: $screen-sm) {
    max-width: $container-sm;

    @if ($sm-grid-gutter != $xs-grid-gutter) {
      padding-left: ($sm-grid-gutter / 2);
      padding-right: ($sm-grid-gutter / 2);
    }
  }

  @media (min-width: $screen-md) {
    width: $container-md;

    @if ($md-grid-gutter != $sm-grid-gutter) {
      padding-left: ($md-grid-gutter / 2);
      padding-right: ($md-grid-gutter / 2);
    }
  }

  @media (min-width: $screen-lg) {
    width: $container-lg;

    @if ($lg-grid-gutter != $md-grid-gutter) {
      padding-left: ($lg-grid-gutter / 2);
      padding-right: ($lg-grid-gutter / 2);
    }
  }

  @media (min-width: $screen-xl) {
    width: $container-xl;

    @if ($xl-grid-gutter != $lg-grid-gutter) {
      padding-left: ($xl-grid-gutter / 2);
      padding-right: ($xl-grid-gutter / 2);
    }
  }

  @media (min-width: $screen-xxl) {
    width: $container-xxl;

    @if ($xxl-grid-gutter != $xl-grid-gutter) {
      padding-left: ($xxl-grid-gutter / 2);
      padding-right: ($xxl-grid-gutter / 2);
    }
  }
}



//------------------------------------------------------------------------------
//  Генератор правил для прямого родителя модульной сетки
//------------------------------------------------------------------------------
//  Принимает:         По умолчанию:        Пояснение:
//  $xs-grid-gutter:   $grid-gutter-width   промежуток между ячейками XS-сетки
//  $sm-grid-gutter:   $grid-gutter-width   промежуток между ячейками SM-сетки
//  $md-grid-gutter:   $grid-gutter-width   промежуток между ячейками MD-сетки
//  $lg-grid-gutter:   $grid-gutter-width   промежуток между ячейками LG-сетки
//  $xl-grid-gutter:   $grid-gutter-width   промежуток между ячейками XL-сетки
//  $xxl-grid-gutter:  $grid-gutter-width   промежуток между ячейками XXL-сетки
//------------------------------------------------------------------------------
// Пример вызова:
// .some-class {
//   @include row (
//     $xs-grid-gutter:  $grid-gutter-width, // отступ по умолчанию
//     $sm-grid-gutter:  0,                  // нет отступа
//     $md-grid-gutter:  $grid-gutter-width  // отступ по умолчанию
//   );
// }
//
// Идентичный вызов:
// .some-class {
//   @include row ( $grid-gutter-width, 0, $grid-gutter-width );
// }
//------------------------------------------------------------------------------

@mixin row (
  $xs-grid-gutter:  $grid-gutter-width,
  $sm-grid-gutter:  $grid-gutter-width,
  $md-grid-gutter:  $grid-gutter-width,
  $lg-grid-gutter:  $grid-gutter-width,
  $xl-grid-gutter:  $grid-gutter-width,
  $xxl-grid-gutter: $grid-gutter-width
) {
  display: flex;
  flex-wrap: wrap;

  & > * {
    flex-basis: 100%;
  }

  @if ($xs-grid-gutter != 0) {
    margin-left: ($xs-grid-gutter / -2);
    margin-right: ($xs-grid-gutter / -2);
  }

  @if ($sm-grid-gutter != $xs-grid-gutter) {

    @media (min-width: $screen-sm) {
      margin-left: ($sm-grid-gutter / -2);
      margin-right: ($sm-grid-gutter / -2);
    }
  }

  @if ($md-grid-gutter != $sm-grid-gutter) {

    @media (min-width: $screen-md) {
      margin-left: ($md-grid-gutter / -2);
      margin-right: ($md-grid-gutter / -2);
    }
  }

  @if ($lg-grid-gutter != $md-grid-gutter) {

    @media (min-width: $screen-lg) {
      margin-left: ($lg-grid-gutter / -2);
      margin-right: ($lg-grid-gutter / -2);
    }
  }

  @if ($xl-grid-gutter != $lg-grid-gutter) {

    @media (min-width: $screen-xl) {
      margin-left: ($xl-grid-gutter / -2);
      margin-right: ($xl-grid-gutter / -2);
    }
  }

  @if ($xxl-grid-gutter != $xl-grid-gutter) {

    @media (min-width: $screen-xxl) {
      margin-left: ($xxl-grid-gutter / -2);
      margin-right: ($xxl-grid-gutter / -2);
    }
  }
}



//------------------------------------------------------------------------------
//  Генератор ширины ячейки
//------------------------------------------------------------------------------
//  Принимает:    По умолчанию:         Пояснение:
//  $column:      1                     ширина (кол-во колонок в этой ячейке)
//  $columns:     $grid-columns;        количество ячеек в ряду
//
//  Возвращает width.
//------------------------------------------------------------------------------

@mixin get-width ($column: 1, $columns: $grid-columns) {
  $width: (100% / $columns) * $column;
  flex: 0 0 $width;
  max-width: $width;
}



//------------------------------------------------------------------------------
//  Генератор правил для одной ячейки
//------------------------------------------------------------------------------
//  Принимает:    По умолчанию:         Пояснение:
//  $column:      1                     ширина (кол-во колонок для этой ячейки)
//  $columns:     $grid-columns;        общее количество ячеек на 1 ряд
//  $gutter:      $grid-gutter-width    промежуток между ячейками
//------------------------------------------------------------------------------

@mixin make-col (
  $column:  1,
  $columns: $grid-columns,
  $gutter:  $grid-gutter-width
) {
  @include get-width($column, $columns);

  // ВНИМАНИЕ!
  // если $gutter == false, в CSS не попадут правила padding-left и padding-right
  @if ($gutter != false) {
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
  }
}



//------------------------------------------------------------------------------
//  Генератор правил для одной ячейки с возможностью указать @media
//------------------------------------------------------------------------------
//  Принимает:    По умолчанию:         Пояснение:
//  $screen:      xs                    тип сетки [xs|sm|md|lg|xl|xxl]
//  $column:      $grid-columns         ширина (кол-во колонок для этой ячейки)
//  $columns:     $grid-columns;        общее количество ячеек на 1 ряд
//  $gutter:      $grid-gutter-width    промежуток между ячейками
//------------------------------------------------------------------------------

@mixin col (
  $screen:  xs,
  $column:  $grid-columns,
  $columns: $grid-columns,
  $gutter:  $grid-gutter-width
) {

  @if ($screen == xs) {
    @include make-col($column, $columns, $gutter);
  }

  @if ($screen == sm) {

    @media (min-width: $screen-sm) {
      @include make-col($column, $columns, $gutter);
    }
  }

  @if ($screen == md) {

    @media (min-width: $screen-md) {
      @include make-col($column, $columns, $gutter);
    }
  }

  @if ($screen == lg) {

    @media (min-width: $screen-lg) {
      @include make-col($column, $columns, $gutter);
    }
  }

  @if ($screen == xl) {

    @media (min-width: $screen-xl) {
      @include make-col($column, $columns, $gutter);
    }
  }

  @if ($screen == xxl) {

    @media (min-width: $screen-xxl) {
      @include make-col($column, $columns, $gutter);
    }
  }
}



//------------------------------------------------------------------------------
//  Генератор правил для отступа одной ячейки с возможностью указать @media
//------------------------------------------------------------------------------
//  Принимает:    По умолчанию:         Пояснение:
//  $screen:      xs                    тип сетки [xs|sm|md|lg|xl|xxl]
//  $column:      1                     ширина отступа (кол-во колонок)
//  $columns:     $grid-columns;        общее количество ячеек на 1 ряд
//------------------------------------------------------------------------------

@mixin col-offset (
  $screen: xs,
  $column: 1,
  $columns: $grid-columns
) {

  @if ($screen == xs) {
    margin-left: ($column * 100% / $columns);
  }

  @if ($screen == sm) {

    @media (min-width: $screen-sm) {
      margin-left: ($column * 100% / $columns);
    }
  }

  @if ($screen == md) {

    @media (min-width: $screen-md) {
      margin-left: ($column * 100% / $columns);
    }
  }

  @if ($screen == lg) {

    @media (min-width: $screen-lg) {
      margin-left: ($column * 100% / $columns);
    }
  }

  @if ($screen == xl) {

    @media (min-width: $screen-xl) {
      margin-left: ($column * 100% / $columns);
    }
  }

  @if ($screen == xxl) {

    @media (min-width: $screen-xxl) {
      margin-left: ($column * 100% / $columns);
    }
  }
}
// миксин отступа справа
@mixin col-offset-right (
  $screen: xs,
  $column: 1,
  $columns: $grid-columns
) {

  @if ($screen == xs) {
    margin-right: ($column * 100% / $columns);
  }

  @if ($screen == sm) {

    @media (min-width: $screen-sm) {
      margin-right: ($column * 100% / $columns);
    }
  }

  @if ($screen == md) {

    @media (min-width: $screen-md) {
      margin-right: ($column * 100% / $columns);
    }
  }

  @if ($screen == lg) {

    @media (min-width: $screen-lg) {
      margin-right: ($column * 100% / $columns);
    }
  }

  @if ($screen == xl) {

    @media (min-width: $screen-xl) {
      margin-right: ($column * 100% / $columns);
    }
  }

  @if ($screen == xxl) {

    @media (min-width: $screen-xxl) {
      margin-right: ($column * 100% / $columns);
    }
  }
}


//------------------------------------------------------------------------------
//  Генератор правил для вспомогательных классов с возможностью указать @media
//------------------------------------------------------------------------------
//  Принимает:    По умолчанию:         Пояснение:
//  $screen:      xs                    тип сетки [xs|sm|md|lg|xl|xxl]
//  $column:      1                     ширина отступа (кол-во колонок)
//  $columns:     $grid-columns;        общее количество ячеек на 1 ряд
//------------------------------------------------------------------------------
@mixin flex-utils($screen) {
  @if ($screen == xs) {
    .flex-row            { flex-direction: row !important; }
    .flex-column         { flex-direction: column !important; }
    .flex-row-reverse    { flex-direction: row-reverse !important; }
    .flex-column-reverse { flex-direction: column-reverse !important; }

    .flex-wrap         { flex-wrap: wrap !important; }
    .flex-nowrap       { flex-wrap: nowrap !important; }
    .flex-wrap-reverse { flex-wrap: wrap-reverse !important; }

    .justify-content-start   { justify-content: flex-start !important; }
    .justify-content-end     { justify-content: flex-end !important; }
    .justify-content-center  { justify-content: center !important; }
    .justify-content-between { justify-content: space-between !important; }
    .justify-content-around  { justify-content: space-around !important; }

    .align-items-start    { align-items: flex-start !important; }
    .align-items-end      { align-items: flex-end !important; }
    .align-items-center   { align-items: center !important; }
    .align-items-baseline { align-items: baseline !important; }
    .align-items-stretch  { align-items: stretch !important; }

    .align-content-start   { align-content: flex-start !important; }
    .align-content-end     { align-content: flex-end !important; }
    .align-content-center  { align-content: center !important; }
    .align-content-between { align-content: space-between !important; }
    .align-content-around  { align-content: space-around !important; }
    .align-content-stretch { align-content: stretch !important; }

    .align-self-auto     { align-self: auto !important; }
    .align-self-start    { align-self: flex-start !important; }
    .align-self-end      { align-self: flex-end !important; }
    .align-self-center   { align-self: center !important; }
    .align-self-baseline { align-self: baseline !important; }
    .align-self-stretch  { align-self: stretch !important; }
  }
  @else {
    .flex-#{$screen}-row            { flex-direction: row !important; }
    .flex-#{$screen}-column         { flex-direction: column !important; }
    .flex-#{$screen}-row-reverse    { flex-direction: row-reverse !important; }
    .flex-#{$screen}-column-reverse { flex-direction: column-reverse !important; }

    .flex-#{$screen}-wrap         { flex-wrap: wrap !important; }
    .flex-#{$screen}-nowrap       { flex-wrap: nowrap !important; }
    .flex-#{$screen}-wrap-reverse { flex-wrap: wrap-reverse !important; }

    .justify-content-#{$screen}-start   { justify-content: flex-start !important; }
    .justify-content-#{$screen}-end     { justify-content: flex-end !important; }
    .justify-content-#{$screen}-center  { justify-content: center !important; }
    .justify-content-#{$screen}-between { justify-content: space-between !important; }
    .justify-content-#{$screen}-around  { justify-content: space-around !important; }

    .align-items-#{$screen}-start    { align-items: flex-start !important; }
    .align-items-#{$screen}-end      { align-items: flex-end !important; }
    .align-items-#{$screen}-center   { align-items: center !important; }
    .align-items-#{$screen}-baseline { align-items: baseline !important; }
    .align-items-#{$screen}-stretch  { align-items: stretch !important; }

    .align-content-#{$screen}-start   { align-content: flex-start !important; }
    .align-content-#{$screen}-end     { align-content: flex-end !important; }
    .align-content-#{$screen}-center  { align-content: center !important; }
    .align-content-#{$screen}-between { align-content: space-between !important; }
    .align-content-#{$screen}-around  { align-content: space-around !important; }
    .align-content-#{$screen}-stretch { align-content: stretch !important; }

    .align-self-#{$screen}-auto     { align-self: auto !important; }
    .align-self-#{$screen}-start    { align-self: flex-start !important; }
    .align-self-#{$screen}-end      { align-self: flex-end !important; }
    .align-self-#{$screen}-center   { align-self: center !important; }
    .align-self-#{$screen}-baseline { align-self: baseline !important; }
    .align-self-#{$screen}-stretch  { align-self: stretch !important; }
  }
}

@mixin flex-utils-media (
  $screen:  xs
) {

  @if ($screen == xs) {
    @include flex-utils($screen);
  }

  @if ($screen == sm) {

    @media (min-width: $screen-sm) {
      @include flex-utils($screen);
    }
  }

  @if ($screen == md) {

    @media (min-width: $screen-md) {
      @include flex-utils($screen);
    }
  }

  @if ($screen == lg) {

    @media (min-width: $screen-lg) {
      @include flex-utils($screen);
    }
  }

  @if ($screen == xl) {

    @media (min-width: $screen-xl) {
      @include flex-utils($screen);
    }
  }

  @if ($screen == xxl) {

    @media (min-width: $screen-xxl) {
      @include flex-utils($screen);
    }
  }
}
